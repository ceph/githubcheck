#!/usr/bin/env python3

import argparse
import itertools
import sys

from githubcheck import Annotation, Check
from githubcheck import Flake8


def batched(elements, batch_size):
    it = iter(elements)
    while True:
        chunk = list(itertools.islice(it, batch_size))
        if chunk:
            yield chunk
        else:
            break


def post_flake8_check(check, args):
    output = {'title': 'Flake8',
              'summary': 'processing'}
    check.start('in_progress', output)

    # see https://developer.github.com/v3/checks/runs/#output-object
    MAX_ANNOTATIONS_PER_REQ = 50
    annotations = []
    stats = None
    parser = Flake8(args.lint_tox_dir, 'flake8', args.lint_preamble)

    for m in parser.scan(args.lint_output):
        if isinstance(m, str):
            stats = m
        else:
            assert isinstance(m, Annotation)
            annotations.append(m)

    output['summary'] = '{} issues found'.format(len(annotations))
    for batch in batched(annotations, MAX_ANNOTATIONS_PER_REQ):
        output['annotations'] = [a.to_dict() for a in batch]
        check.update(output)
        del output['annotations']

    if stats:
        output['text'] = stats
    if len(annotations) > 0:
        conclusion = 'failure'
    else:
        conclusion = 'success'
    check.complete(conclusion, output)


def main():
    parser = argparse.ArgumentParser()

    repo_group = parser.add_argument_group('repo options')
    repo_group.add_argument('--owner', help='repo owner', default='ceph')
    repo_group.add_argument('--repo', help='repo name', default='ceph')

    app_group = parser.add_argument_group('app options')
    app_group.add_argument('--pkey-file', help='path to private key of app',
                           required=True,
                           type=argparse.FileType('rb'))
    app_group.add_argument('--app-id', type=int, required=True)
    app_group.add_argument('--install-id', type=int, required=True)

    check_group = parser.add_argument_group('check options')
    check_group.add_argument('--sha', help='SHA1 of commit', required=True)
    check_group.add_argument('--name', help='the name of check', required=True)
    check_group.add_argument('--details-url', help='the URL of jenkins job')
    check_group.add_argument('--external-id', help='the reference of jenkins job')
    check_group.add_argument('--status', help='the status of check',
                             choices=['queued', 'in_progress', 'completed'],
                             default='in_progress')
    check_group.add_argument('--conclusion',
                             help='the conclusion of a completed test',
                             choices=['success', 'failure', 'neutral',
                                      'cancelled', 'skipped', 'timed_out',
                                      'action_required'])
    check_group.add_argument('--title',
                             help='the title of check',
                             default='Summary')
    check_group.add_argument('--summary',
                             help='a summary of check')
    if sys.stdin.isatty():
        default_text = None
    else:
        default_text = sys.stdin
    check_group.add_argument('--text',
                             help='path to a Markdown formatted text file',
                             type=argparse.FileType('r'),
                             default=default_text)

    lint_group = parser.add_argument_group('lint options')
    lint_group.add_argument('--lint',
                            help='translate lint warnings to annotations',
                            action='store_true')
    # preamble looks like "<testenv>:<command>"
    lint_group.add_argument('--lint-preamble',
                            help='prefix of the line before the lint output',
                            default='lint:flake8')
    lint_group.add_argument('--lint-tox-dir',
                            help='path to tox.ini')
    lint_group.add_argument('--lint-output',
                            help='path to the messages from lint',
                            type=argparse.FileType('r'),
                            default=sys.stdin)

    args = parser.parse_args()

    check = Check(args.owner, args.repo, args.name,
                  args.pkey_file.read(), args.app_id, args.install_id,
                  args.sha, args.details_url, args.external_id)
    if args.lint:
        if args.lint_tox_dir is None:
            parser.error("please specify '--lint-tox-dir' "
                         "if '--link' is specified")
        post_flake8_check(check, args)
    elif args.status == 'completed':
        if args.conclusion is None:
            parser.error("please specify '--conclusion' "
                         "if '--status' is 'completed'")
        if args.summary is None:
            parser.error("please specify '--summary' "
                         "if '--status' is 'completed'")
        if args.text is None:
            parser.error("please specify '--text' "
                         "if '--status' is 'completed'")
        output = {'title': 'completed',
                  'summary': args.summary,
                  'text': args.text.read()}
        check.complete(args.conclusion, output)
    else:
        output = {'title': args.title,
                  'summary': args.summary if args.summary else 'started'}
        if args.text is not None:
            output['text'] = args.text.read()
        check.start(args.status, output)


if __name__ == '__main__':
    main()
